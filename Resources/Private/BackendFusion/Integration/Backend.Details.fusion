Flowpack.DecoupledContentStore.BackendController.details = Neos.Fusion:Component {

    // Context Variables
    // - detailsData: API, ContentReleaseDetails
    // - detailTaskName: string, optional
    // - jobLogs: JobLogs, optional
    // - contentStore: string, currently active content store / redis instance
    // - redisContentStores: array of all configured content store identifiers
    // - isPrimary: bool

    renderer = afx`
        <form id="postHelper" method="post">
            <input
                type="hidden"
                name="__csrfToken"
                value={Security.csrfToken()}
            />
        </form>
        <Flowpack.DecoupledContentStore:Integration.StylesAndScripts/>
        <h1 class="text-3xl py-5 inline">
            Content Release {detailsData.contentReleaseIdentifier.identifier}
        </h1>
        {" "}
        <span class="neos-badge" style="vertical-align: super;" title="content store" data-neos-toggle="tooltip">{contentStore}</span>
        <Flowpack.DecoupledContentStore:ContentReleaseSteps
            _taskResults={detailsData.job.taskResults}
            prunnerStart={detailsData.job.created}
        />
        <Neos.Fusion:Loop items={detailsData.manualTransferJobs}>
            <Flowpack.DecoupledContentStore:ContentReleaseSteps
                _taskResults={item.taskResults}
                isManualTransferPipeline={true}
                prunnerJobId={item.id.id}
                prunnerStart={item.created}
                manualSwitchTarget={item.variables.redisInstanceId}
            />
        </Neos.Fusion:Loop>

        <h2 @if.isTrue={detailTaskName} class="text-3xl py-5">Log Output for {detailTaskName}</h2>
        <pre>
            {jobLogs.stderr}
        </pre>
        <pre>
            {jobLogs.stdout}
        </pre>
        <Flowpack.DecoupledContentStore:DetailsFooter />
    `
}


prototype(Flowpack.DecoupledContentStore:ContentReleaseSteps) < prototype(Neos.Fusion:Component) {
    _taskResults = null
    isManualTransferPipeline = false
    prunnerJobId = ''
    prunnerStart = ''
    prunnerStart.@process.date = ${value ? Date.format(value, 'd.m.Y H:i:s') : ''}
    manualSwitchTarget = ''

    renderer = afx`
        <span class="inline-block mt-4" @if.isManualTransferPipeline={props.isManualTransferPipeline}>Start: {props.prunnerStart}, Transfer to: {props.manualSwitchTarget}</span>
        <ol class="border border-gray-300 rounded-md divide-y divide-gray-300 md:flex md:divide-y-0 bg-gray-700">
            <!-- Prepare -->
            <Flowpack.DecoupledContentStore:ContentReleaseSteps.Step
                    number="0"
                    title="Prepare"
                    status={props._taskResults.filteredByPrefix('prepare_').aggregatedStatus}>
                <div class="pl-5 pr-10 flex-1 leading-6">
                    <Neos.Fusion:Loop
                            items={props._taskResults.filteredByPrefix('prepare_').withoutTasks('prepare_finished')}
                            itemName="task">
                        <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                                task={task}
                                title={String.replace(task.name, 'prepare_', '')}
                                prunnerJobId={props.prunnerJobId}
                        />
                    </Neos.Fusion:Loop>
                </div>
                <div class="pl-5 pr-10 py-2 flex justify-end">
                    <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                            task={props._taskResults.get('prepare_finished')}
                            title="all ok?"
                            prunnerJobId={props.prunnerJobId}
                    />
                </div>
            </Flowpack.DecoupledContentStore:ContentReleaseSteps.Step>

            <!-- Enumerate -->
            <Flowpack.DecoupledContentStore:ContentReleaseSteps.Step
                    number="1"
                    title="Enumeration"
                    status={props._taskResults.filteredByPrefix('enumerate_').aggregatedStatus}>
                <div class="pl-5 pr-10 flex-1 leading-6">
                    <Neos.Fusion:Loop
                            items={props._taskResults.filteredByPrefix('enumerate_').withoutTasks('enumerate_finished')}
                            itemName="task">
                        <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                                task={task}
                                title={String.replace(task.name, 'enumerate_', '')}
                                prunnerJobId={props.prunnerJobId}
                        />
                    </Neos.Fusion:Loop>
                </div>
                <div class="pl-5 pr-10 py-2 flex justify-end">
                    <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                            task={props._taskResults.get('enumerate_finished')}
                            title="all ok?"
                            prunnerJobId={props.prunnerJobId}
                    />
                </div>
            </Flowpack.DecoupledContentStore:ContentReleaseSteps.Step>

            <!-- Render -->
            <Flowpack.DecoupledContentStore:ContentReleaseSteps.Step
                    number="2"
                    title="Rendering"
                    status={props._taskResults.filteredByPrefix('render_').aggregatedStatus}>
                <div class="pl-5 pr-10 flex-1 leading-6">
                    <Neos.Fusion:Loop
                            items={props._taskResults.filteredByPrefix('render_').withoutTasks('render_finished', 'render_orchestrator')}
                            itemName="task">
                        <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                                task={task}
                                title={String.replace(task.name, 'render_', '')}
                                prunnerJobId={props.prunnerJobId}
                        />
                    </Neos.Fusion:Loop>
                </div>
                <div class="pl-5 pr-10 py-2 flex justify-end">
                    <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                            task={props._taskResults.get('render_orchestrator')}
                            title="orchestrator"
                            prunnerJobId={props.prunnerJobId}
                    />
                    <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                            task={props._taskResults.get('render_finished')}
                            title="all ok?"
                            prunnerJobId={props.prunnerJobId}
                    />
                </div>
            </Flowpack.DecoupledContentStore:ContentReleaseSteps.Step>

            <!-- Validation -->
            <Flowpack.DecoupledContentStore:ContentReleaseSteps.Step
                    number="3"
                    title="Validation"
                    status={props._taskResults.filteredByPrefix('validate_').aggregatedStatus}>
                <div class="pl-5 pr-10 flex-1 leading-6">
                    <Neos.Fusion:Loop
                            items={props._taskResults.filteredByPrefix('validate_').withoutTasks('validate_finished')}
                            itemName="task">
                        <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                                task={task}
                                title={String.replace(task.name, 'validate_', '')}
                                prunnerJobId={props.prunnerJobId}
                        />
                    </Neos.Fusion:Loop>
                </div>
                <div class="pl-5 pr-10 py-2 flex justify-end">
                    <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                            task={props._taskResults.get('validate_finished')}
                            title="all ok?"
                            prunnerJobId={props.prunnerJobId}
                    />
                </div>
            </Flowpack.DecoupledContentStore:ContentReleaseSteps.Step>

            <!-- Transfer -->
            <Flowpack.DecoupledContentStore:ContentReleaseSteps.Step
                    number="4"
                    title="Transfer"
                    status={props._taskResults.filteredByPrefix('transfer_').aggregatedStatus}>
                <div class="pl-5 pr-10 flex-1 leading-6">
                    <Neos.Fusion:Loop
                            items={props._taskResults.filteredByPrefix('transfer_').withoutTasks('transfer_finished')}
                            itemName="task">
                        <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                                task={task}
                                title={String.replace(task.name, 'transfer_', '')}
                                prunnerJobId={props.prunnerJobId}
                        />
                    </Neos.Fusion:Loop>
                </div>
                <div class="pl-5 pr-10 py-2 flex justify-end">
                    <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                            task={props._taskResults.get('transfer_finished')}
                            title="all ok?"
                            prunnerJobId={props.prunnerJobId}
                    />
                </div>
            </Flowpack.DecoupledContentStore:ContentReleaseSteps.Step>

            <!-- Switch -->
            <Flowpack.DecoupledContentStore:ContentReleaseSteps.Step
                    number="5"
                    title="Switch"
                    status={props._taskResults.filteredByPrefix('switch_').aggregatedStatus}
                    isLast={true}>
                <div class="pl-5 pr-10 flex-1 leading-6">
                    <Neos.Fusion:Loop
                            items={props._taskResults.filteredByPrefix('switch_').withoutTasks('switch_finished')}
                            itemName="task">
                        <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                                task={task}
                                title={String.replace(task.name, 'switch_', '')}
                                prunnerJobId={props.prunnerJobId}
                        />
                    </Neos.Fusion:Loop>
                </div>
                <div class="pl-5 pr-10 py-2 flex justify-end">
                    <Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask
                            task={props._taskResults.get('switch_finished')}
                            title="all ok?"
                            prunnerJobId={props.prunnerJobId}
                    />
                </div>
            </Flowpack.DecoupledContentStore:ContentReleaseSteps.Step>
        </ol>


        <dl @if.isNotManualTransferPipeline={!props.isManualTransferPipeline} class="md:flex md:divide-y-0 divide-y">
            <Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
                <Flowpack.DecoupledContentStore:ContentReleaseStats.Stat title={"Start: " + props.prunnerStart} />
            </Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
            <Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
                <Flowpack.DecoupledContentStore:ContentReleaseStats.Stat title="Enumerated Pages">
                    {detailsData.enumeratedDocumentNodesCount}
                </Flowpack.DecoupledContentStore:ContentReleaseStats.Stat>
            </Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
            <Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
                <Neos.Fusion:Loop items={detailsData.renderingStatistics}>
                    <Flowpack.DecoupledContentStore:ContentReleaseStats.Stat title={"Rendered Pages Iteration " + (iterator.index + 1)}>
                        {item.renderedJobs}
                        / {item.totalJobs}
                        {item.svgSparkline}
                    </Flowpack.DecoupledContentStore:ContentReleaseStats.Stat>
                </Neos.Fusion:Loop>
            </Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
            <Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
                <Flowpack.DecoupledContentStore:ContentReleaseStats.Stat title="Errors">
                    {detailsData.renderingErrorCount}
                </Flowpack.DecoupledContentStore:ContentReleaseStats.Stat>
            </Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
            <Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
                <Flowpack.DecoupledContentStore:ContentReleaseStats.Stat title="Total Content Release Size">
                    TODO
                </Flowpack.DecoupledContentStore:ContentReleaseStats.Stat>
            </Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
            <Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
                <Flowpack.DecoupledContentStore:ContentReleaseStats.Stat title="Is currently live?">
                    {detailsData.active ? detailsData.active : "-"}
                </Flowpack.DecoupledContentStore:ContentReleaseStats.Stat>
            </Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox>
        </dl>
    `
}

prototype(Flowpack.DecoupledContentStore:ContentReleaseSteps.Step) < prototype(Neos.Fusion:Component) {
    number = '00'
    title = "Foo"
    isLast = false

    status = 'running'
    _statusClass = ${this.status}
    _statusClass.@process.replace = Flowpack.DecoupledContentStore:StatusToClassMapping

    renderer = afx`
        <li class="relative md:flex-1 md:flex">
            <span class="flex flex-col w-full">
                <span class="w-full flex items-center">
                    <span class="px-6 py-4 flex items-center text-sm font-medium">
                        <span class={"flex-shrink-0 w-10 h-10 flex items-center justify-center rounded-full border-2 " + props._statusClass}
                              title={props.status}>
                            <span class="text-white">{props.number}</span>
                        </span>

                        {props._status}
                        <span class="ml-4 text-sm font-medium text-white">{props.title}</span>

                    </span>
                </span>
                {props.content}
                <!-- Arrow Right -->
                <div @if.isTrue={!props.isLast}
                     class="hidden md:block absolute top-0 right-0 bottom-0 w-5 overflow-hidden" aria-hidden="true">
                    <svg class="w-full text-gray-300" viewBox="0 0 22 600" fill="none" preserveAspectRatio="none">
                        <path d="M0 -2L20 40L0 82L0 600" stroke-width="2" vector-effect="non-scaling-stroke"
                              stroke="currentcolor" stroke-linejoin="round" stroke-linecap="round"/>
                    </svg>
                </div>
            </span>
        </li>
    `
}


prototype(Flowpack.DecoupledContentStore:ContentReleaseSteps.StepTask) < prototype(Neos.Fusion:Component) {
    title = "Foo"
    prunnerJobId = ''

    // TaskResult DTO object
    task = null
    _statusClass = ${this.task.status}
    _statusClass.@process.replace = Flowpack.DecoupledContentStore:StatusToClassMapping

    _href = ${this.task.name}
    _href.@process.convertToUri = Neos.Fusion:UriBuilder {
        action = 'details'
        arguments.detailTaskName = ${value}
        arguments.prunnerJobId = ${props.prunnerJobId}
        addQueryString = true
    }


    renderer = afx`
        <a href={props._href} title={props.task.status}
           class={"inline-flex items-center mx-1 px-2.5 py-0.5 rounded-full border-2 text-xs font-medium text-white " + props._statusClass}>
            {props.title}
        </a>
    `
}

prototype(Flowpack.DecoupledContentStore:ContentReleaseStats.StatsBox) < prototype(Neos.Fusion:Component) {
    renderer = afx`
        <div class="flex-1 mr-5 my-5 bg-white shadow rounded-lg overflow-hidden py-3 px-6">
            {props.content}
        </div>
    `
}

prototype(Flowpack.DecoupledContentStore:StatusToClassMapping) < prototype(Neos.Fusion:Case) {
    done.condition = ${value == 'done'}
    done.renderer = 'bg-green-400 border-green-400'

    running.condition = ${value == 'running'}
    running.renderer = 'bg-yellow-400 border-yellow-400 animate-pulse'

    error.condition = ${value == 'error'}
    error.renderer = 'bg-red-500 border-red-500'

    waiting.condition = ${value == 'waiting'}
    waiting.renderer = 'border-gray-300'

    canceled.condition = ${value == 'canceled'}
    canceled.renderer = 'bg-gray-300 border-gray-500'

    skipped.condition = ${value == 'skipped'}
    skipped.renderer = 'bg-gray-300 border-gray-500'

    unknown.condition = ${value == 'unknown'}
    unknown.renderer = 'bg-blue-300'
}

prototype(Flowpack.DecoupledContentStore:ContentReleaseStats.Stat) < prototype(Neos.Fusion:Component) {
    title = "Foo"

    renderer = afx`
        <dt class="pt-2 text-sm font-medium text-gray-500 truncate">
            {props.title}
        </dt>
        <dd class="mt-1 mb-2 text-3xl font-semibold text-gray-900">
            {props.content}
        </dd>
    `
}

prototype(Flowpack.DecoupledContentStore:DetailsFooter) < prototype(Neos.Fusion:Component) {
    _switchUri = Neos.Fusion:UriBuilder {
        action = 'switch'
        arguments = Neos.Fusion:DataStructure {
            contentReleaseIdentifier = ${detailsData.contentReleaseIdentifier.identifier}
            redisInstanceIdentifier = ${contentStore}
        }
    }

    _removeUri = Neos.Fusion:UriBuilder {
        action = 'remove'
        arguments = Neos.Fusion:DataStructure {
            contentReleaseIdentifier = ${detailsData.contentReleaseIdentifier.identifier}
            redisInstanceIdentifier = ${contentStore}
        }
    }

    _renderedSwitchButtons = Neos.Fusion:Loop {
        items = ${redisContentStores}
        itemRenderer = Neos.Fusion:Component {
            _switchUri = Neos.Fusion:UriBuilder {
                action = 'switchContentReleaseOnOtherInstance'
                arguments = Neos.Fusion:DataStructure {
                    contentReleaseIdentifier = ${detailsData.contentReleaseIdentifier.identifier}
                    targetRedisInstanceIdentifier = ${item}
                }
            }

            renderer = afx`
                <button form="postHelper" formaction={props._switchUri} type="submit" class="neos-button neos-button-warning neos-pull-right" @if.isNotPrimary={item != "primary"}>
                    Transfer and switch on {item}
                </button>
            `
        }
    }

    renderer = afx`
        <div class="neos-footer">
            <Neos.Fusion:Link.Action href.action="details" href.arguments={{contentReleaseIdentifier: detailsData.contentReleaseIdentifier.identifier}} class="neos-button">
                <i class="fa fa-sync"></i> Reload
            </Neos.Fusion:Link.Action>

            <button form="postHelper" formaction={props._removeUri} type="submit" class="neos-button neos-button-warning neos-pull-right">
                Remove release
            </button>
            <button form="postHelper" formaction={props._switchUri} type="submit" class="neos-button neos-button-warning neos-pull-right">
                Switch to release
            </button>

            {isPrimary ? props._renderedSwitchButtons : ''}

        </div>
    `
}
