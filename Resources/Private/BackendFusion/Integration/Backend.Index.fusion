Flowpack.DecoupledContentStore.BackendController.index = Neos.Fusion:Component {

    // Context Variables:
    // - overviewData: list of ContentReleaseOverviewRow objects
    // - contentStore: contains string content store identifier
    // - redisContentStores: array of all configured content store identifiers
    // - storeSize: string of content store size

    renderer = Neos.Fusion:Component {
        _pruneContentStoreUri = Neos.Fusion:UriBuilder {
            action = 'pruneContentStore'
            arguments = Neos.Fusion:DataStructure {
                redisInstanceIdentifier = ${contentStore}
            }
        }

        _renderedTableBody = Neos.Fusion:Loop {
            items = ${overviewData}
            itemRenderer = Neos.Fusion:Component {
                // item instanceof ContentReleaseOverviewRow
                contentReleaseIdentifier = ${item.contentReleaseIdentifier.identifier}

                enumeratedDocumentNodesCount = ${item.enumeratedDocumentNodesCount}
                start = ${Date.format(item.metadata.startTime, 'd.m.Y H:i:s')}
                end = ${item.metadata.endTime ? Date.format(item.metadata.endTime, 'd.m.Y H:i:s') : ''}
                switch = ${item.metadata.switchTime ? Date.format(item.metadata.switchTime, 'd.m.Y H:i:s') : ''}

                renderer = afx`
                    <tr>
                        <td>
                            <Neos.Fusion:Link.Action href.action="details" href.arguments={{contentReleaseIdentifier: props.contentReleaseIdentifier, contentStore: contentStore}}>
                                {props.contentReleaseIdentifier}
                            </Neos.Fusion:Link.Action>
                            {" "}
                            <span class="neos-badge" title="status" data-neos-toggle="tooltip">{item.metadata.status.displayName}</span>
                            <span @if.isActive={item.active} class="neos-badge neos-badge-info">active</span>
                            <span @if.errors={item.errorCount} class="neos-badge neos-badge-important" title="errors" data-neos-toggle="tooltip">{item.errorCount}</span>
                        </td>
                        <td>
                            {props.enumeratedDocumentNodesCount}
                        </td>
                        <td>
                            <span @if.isRunning={item.metadata.status.running}>{item.progress}%</span>
                            <span @if.isNotRunning={!item.metadata.status.running}>
                                <span class="neos-badge neos-badge-success" title="rendered" data-neos-toggle="tooltip">{item.renderedUrlCount}</span>
                                / <span class="neos-badge" title="total" data-neos-toggle="tooltip">{props.enumeratedDocumentNodesCount}</span>
                            </span>
                        </td>
                        <td>{item.iterationsCount}</td>
                        <td>{props.start}</td>
                        <td>{props.end}</td>
                        <td>{props.switch}</td>
                        <td>{item.releaseSize} MB</td>
                    </tr>
                `
            }
        }
        renderer = afx`
            <form id="postHelper" method="post">
                <input
                        type="hidden"
                        name="__csrfToken"
                        value={Security.csrfToken()}
                />
            </form>
            <div class="neos-content neos-container-fluid">
                <Flowpack.DecoupledContentStore:Integration.StylesAndScripts/>
                <legend>Content Store Releases</legend>
                <div class="neos-row-fluid">
                    <table class="neos-table cs-releases-table">
                        <thead>
                        <tr>
                            <th style="width: 240px">Identifier</th>
                            <th style="width: 200px">Page Count</th>
                            <th style="width: 200px">Render Progress</th>
                            <th style="width: 200px">Iterations</th>
                            <th>Start</th>
                            <th>Stop</th>
                            <th>Switch</th>
                            <th>Release Size</th>
                        </tr>
                        </thead>
                        <tbody>
                            {props._renderedTableBody}
                        </tbody>
                    </table>

                    <span>Store size: </span>
                    <span class="neos-badge neos-badge-info">{storeSize}</span>
                    <br />
                    <button form="postHelper" formaction={props._pruneContentStoreUri} type="submit" class="neos-button neos-button-danger" style="margin-top: 300px;">
                        Prune content store
                    </button>

                    <Flowpack.DecoupledContentStore:ListFooter />
                </div>
            </div>
        `
    }
}

prototype(Flowpack.DecoupledContentStore:ListFooter) < prototype(Neos.Fusion:Component) {
    _publishAllUri = Neos.Fusion:UriBuilder {
        action = 'publishAll'
    }

    renderer = afx`
        <div class="neos-footer">
            <Neos.Fusion:Link.Action href.action="index" class="neos-button">
                <i class="fa fa-sync"></i> Reload
            </Neos.Fusion:Link.Action>
            <span class="align-middle inline-block text-sm pr-4 pl-16">Active Content Store:</span>
            <Neos.Fusion:Loop items={redisContentStores}>
                <Neos.Fusion:Link.Action href.action="index" href.arguments={{contentStore: item}} class={AtomicFusion.classNames('neos-button', {'neos-button-primary': item == contentStore})}>
                    {item}
                </Neos.Fusion:Link.Action>
            </Neos.Fusion:Loop>

            <button form="postHelper" formaction={props._publishAllUri} type="submit" class="neos-button neos-button-warning neos-pull-right">
                Publish All
            </button>
        </div>
    `
}
